// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "withpattern/model"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddTodo provides a mock function with given fields: ctx, name
func (_m *Repository) AddTodo(ctx context.Context, name string) (*mongo.InsertOneResult, error) {
	ret := _m.Called(ctx, name)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(context.Context, string) *mongo.InsertOneResult); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteTodo(ctx context.Context, id string) (*mongo.DeleteResult, error) {
	ret := _m.Called(ctx, id)

	var r0 *mongo.DeleteResult
	if rf, ok := ret.Get(0).(func(context.Context, string) *mongo.DeleteResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodo provides a mock function with given fields: ctx
func (_m *Repository) GetTodo(ctx context.Context) ([]*model.Todo, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Todo
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: ctx, id, name
func (_m *Repository) UpdateTodo(ctx context.Context, id string, name string) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, id, name)

	var r0 *mongo.UpdateResult
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *mongo.UpdateResult); ok {
		r0 = rf(ctx, id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
